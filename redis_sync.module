<?php
/**
 * Implementation hook_init
 */
function redis_sync_init() {
  // include predis library
  $path = libraries_get_path('predis');
  $autoloader = $path . '/autoload.php';
  if (file_exists($autoloader)) {
    require $autoloader;
    Predis\Autoloader::register();
  }
  else {
    drupal_set_message(t('Predis library not found. Please check directory: "@path"', array('@path' => $path)), 'warning');
  }
}

/**
 * Implementation hook_menu
 */
function redis_sync_menu() {
  $items = array();

  $items['admin/data-export/redis-sync'] = array(
    'title' => 'Data Export',
    'description' => t('Administer export content to redis'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redis_sync_admin_form'),
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'redis_sync.admin.inc'
  );

  $items['admin/data-export/redis-sync/entity'] = array(
    'title' => 'Entity settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/data-export/redis-sync/resync'] = array(
    'title' => 'Re-Sync data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redis_sync_admin_resync_form'),
    'access arguments' => array('administer content'),
    'file' => 'redis_sync.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/data-export/redis-sync/connect'] = array(
    'title' => 'Connection settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redis_sync_admin_connection_form'),
    'access arguments' => array('administer content'),
    'file' => 'redis_sync.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation hook_entity_insert
 */
function redis_sync_entity_insert($entity, $type) {
  $sync_entity_enabled = variable_get('redis_sync_enable_' . $type, 0);
  if ($sync_entity_enabled) {
    if ($type == 'node') {
      $sync_content_type_enabled = variable_get('redis_sync_enable_node_' . $entity->type, 0);
      if ($sync_content_type_enabled) {
        $key = _redis_sync_hash_key($entity, $type);
        $entity = _redis_sync_exclude_fields($entity);
        $hash = _redis_sync_hash($entity, $type);
        redis_sync_push($key, $hash);
      }
    }
    else {
      $key = _redis_sync_hash_key($entity, $type);
      $hash = _redis_sync_hash($entity, $type);
      redis_sync_push($key, $hash);
    }
  }
}


/**
 * Implementation hook_entity_update
 */
function redis_sync_entity_update($entity, $type) {
  $sync_entity_enabled = variable_get('redis_sync_enable_' . $type, 0);
  if ($sync_entity_enabled) {
    if ($type == 'node') {
      $sync_content_type_enabled = variable_get('redis_sync_enable_node_' . $entity->type, 0);
      if ($sync_content_type_enabled) {
        $key = _redis_sync_hash_key($entity, $type);
        if (isset($entity->original)) {
          unset($entity->original);
        }
        $entity = _redis_sync_exclude_fields($entity);
        $hash = _redis_sync_hash($entity, $type);
        redis_sync_update($key, $hash);
      }
    }
    else {
      $key = _redis_sync_hash_key($entity, $type);
      $hash = _redis_sync_hash($entity, $type);
      redis_sync_update($key, $hash);
    }
  }
}

/**
 *
 * Make hash key
 * based on entity type and entity id
 *
 * @param $entity
 * @param $type
 * @return string
 */
function _redis_sync_hash_key($entity, $type) {
  $ids = entity_extract_ids($type, $entity);
  $entity_id = array_shift($ids);
  $pattern = variable_get('redis_sync_key_pattern_' . $type, NULL);
  if ($pattern && $pattern != 'entity_type:entity_id') {
    $key = token_replace($pattern, array($type => $entity));
  }
  else {
    $key = $type . ':' . $entity_id;
  }
  return $key;
}

/**
 * Make hash
 * based on entity
 *
 * @param $entity
 * @return array
 */
function _redis_sync_hash($entity, $entity_type) {
  $ids = entity_extract_ids($entity_type, $entity);
  $entity_id = array_shift($ids);
  $bundle = array_pop($ids);
  $fields = field_info_instances($entity_type, $bundle);
  $hash = array();
  $core = array();
  foreach ($fields as $field_key => $field_settings) {
    if (isset($entity->{$field_key})) {
      $core[$field_key] = $entity->{$field_key};
      unset($entity->{$field_key});
    }
  }
  $meta = drupal_json_encode($entity);
  $core = drupal_json_encode($core);
  $hash['id'] = $entity_id;
  $hash['timestamp'] = time();
  $hash['core'] = $core;
  $hash['meta'] = $meta;
  return $hash;
}

/**
 * Push data to redis
 * also send pubsub message
 *
 * @param $key
 * @param $hash
 * @return mixed
 */
function redis_sync_push($key, $hash) {
  $client = redis_sync_get_client();
  $res = $client->hmset($key, $hash);
  if ($res) {
    watchdog('redis sync', t('Hash "@key" has been stored into redis storage', array('@key' => $key)));
  }
  $channel = variable_get('redis_sync_pubsub_channel', 'entity');
  $m = $client->publish($channel, $key);
  if ($m) {
    watchdog('redis sync', t('Message @m has been published in channel @c', array('@m' => $key, '@c' => $channel)));
  }
  return $res;
}

/**
 * Update existing hash
 *
 * @param $key
 * @param $hash
 */
function redis_sync_update($key, $hash) {
  $client = redis_sync_get_client();
  $value = $client->hgetall($key);
  if (!empty($value)) {
    $client->del($key);
  }
  redis_sync_push($key, $hash);
}

function redis_sync_get_client() {
  $config = array(
    'scheme' => variable_get('redis_sync_scheme', 'tcp'),
    'host'   => variable_get('redis_sync_host', '127.0.0.1'),
    'port'   => variable_get('redis_sync_port', 6379),
    'database' => variable_get('redis_sync_database', 0),
    'password' => variable_get('redis_sync_password', ''),
  );
  $client = new Predis\Client($config);
  return $client;
}

/**
 *
 * Remove disabled fields from entity
 *
 * @param $entity
 * @return mixed
 */
function _redis_sync_exclude_fields($entity) {
  $fields = field_info_instances('node', $entity->type);
  if (!empty($fields)) {
    foreach ($fields as $field) {
      $enabled = variable_get('redis_sync_enable_node_' . $entity->type . '_' . $field['field_name'], 1);
      if (!$enabled) {
        unset($entity->{$field['field_name']});
      }
    }
  }
  return $entity;
}